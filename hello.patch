Index: .gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.gitignore b/.gitignore
--- a/.gitignore	(revision 41a4e6a0199a8a98e55a9c083a125bdabb964e0d)
+++ b/.gitignore	(date 1671489520159)
@@ -1,3 +1,4 @@
 # dependencies
 node_modules
-.history
\ No newline at end of file
+.history
+.idea
\ No newline at end of file
Index: controllers/TagController.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/controllers/TagController.js b/controllers/TagController.js
--- a/controllers/TagController.js	(revision 41a4e6a0199a8a98e55a9c083a125bdabb964e0d)
+++ b/controllers/TagController.js	(date 1671471642047)
@@ -2,37 +2,13 @@
 
 // Get all tags
 export const get_all = async (req, res) => {
-  try {
-    const tags = await TagModel.find().exec()
+  const tags = await TagModel.find().exec()
 
-    if (!tags) {
-      return res.status(404).json({
-        message: 'Tags not found!',
-      })
-    }
+  if (!tags) {
+    return res.status(404).json({
+      message: 'Tags not found!',
+    })
+  }
 
-    res.json(tags)
-  } catch (err) {
-    console.log(err)
-    res.status(500).json({
-      message: 'No access!',
-    })
-  }
-}
-
-export const create = async (req, res) => {
-  try {
-    const doc = new TagModel({
-      text: req.body.text,
-    })
-
-    const tag = await doc.save()
-
-    res.json(tag)
-  } catch (err) {
-    console.log(err)
-    res.status(500).json({
-      message: 'Failed to create an article',
-    })
-  }
+  res.json(tags)
 }
Index: routes/user.routes.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/routes/user.routes.js b/routes/user.routes.js
--- a/routes/user.routes.js	(revision 41a4e6a0199a8a98e55a9c083a125bdabb964e0d)
+++ b/routes/user.routes.js	(date 1671487690687)
@@ -4,29 +4,26 @@
 import {
   loginValidation,
   registerValidation,
-} from '../validations/UserValidations.js'
+} from '../validations/userValidations.js'
 
 const router = express.Router()
 
 // Create user
-router.post(
-  '/register',
-  registerValidation,
-  handleValidationErrors,
+router.post('/register',
+  ...registerValidation,
   UserController.register
 )
 // Login user
 router.post(
   '/login',
-  loginValidation,
-  handleValidationErrors,
+  ...loginValidation,
   UserController.login
 )
 
 // Get me
 router.get('/me', checkAuth, UserController.get_me)
 // Get all users (admins only)
-router.get('/all', checkAuth, UserController.get_all)
+router.get('/', checkAuth, UserController.get_all)
 
 router.patch('/:id', checkAuth, UserController.update)
 
Index: routes/tag.routes.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/routes/tag.routes.js b/routes/tag.routes.js
--- a/routes/tag.routes.js	(revision 41a4e6a0199a8a98e55a9c083a125bdabb964e0d)
+++ b/routes/tag.routes.js	(date 1671471143631)
@@ -5,6 +5,4 @@
 
 router.get('/', TagController.get_all)
 
-router.post('/', TagController.create)
-
 export default router
Index: middleware/checkAuth.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/middleware/checkAuth.js b/middleware/checkAuth.js
--- a/middleware/checkAuth.js	(revision 41a4e6a0199a8a98e55a9c083a125bdabb964e0d)
+++ b/middleware/checkAuth.js	(date 1671471012261)
@@ -1,8 +1,4 @@
-import jwt from 'jsonwebtoken'
-
 export default (req, res, next) => {
-  const token = (req.headers.authorization || '').replace(/Bearer\s?/, '')
-
   if (req.userId) {
     next()
   } else {
Index: validations/PostValidations.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/validations/PostValidations.js b/validations/postValidations.js
rename from validations/PostValidations.js
rename to validations/postValidations.js
--- a/validations/PostValidations.js	(revision 41a4e6a0199a8a98e55a9c083a125bdabb964e0d)
+++ b/validations/postValidations.js	(date 1671489018535)
@@ -1,13 +1,71 @@
-import { body } from 'express-validator'
+import {body, query} from 'express-validator'
+import handleValidationErrors from "../middleware/handleValidationErrors.js";
 
-export const postCreateValidation = [
-  body('title', 'Enter the title of the article')
+const titleRule = body('title')
     .isLength({ min: 2 })
-    .isString(),
-  body('text', 'Enter the text of the article')
+    .isString()
+
+const textRule = body('text')
     .isLength({
       min: 5,
     })
-    .isString(),
-  body('image_url', 'Invalid image link').optional().isString(),
+    .isString()
+
+const topicRules = [
+  body('topic_id').isString().optional().notEmpty(),
+  body('topic').isObject().optional().notEmpty(),
+  body('topic.title')
+      .if(body('topic').exists())
+      .isString()
+      .notEmpty(),
+  body('topic.group')
+      .if(body('topic').exists())
+      .isString()
+      .notEmpty()
+]
+
+const tagsRule = body('tags', 'Invalid tags').isArray().customSanitizer(value => {
+  return value.map(tag => tag.toLowerCase())
+})
+
+const imageUrlRule = body('image_url').optional().isString().isURL()
+
+const ratingRule = body('rating').isInt({ min: 1, max: 10 })
+
+const userIdRule = body('user_id').optional().isString().notEmpty()
+
+export const postCreateValidation = [
+  titleRule,
+  textRule,
+  ...topicRules,
+  tagsRule,
+  imageUrlRule,
+  ratingRule,
+  userIdRule,
+  handleValidationErrors
 ]
+
+export const postUpdateValidation = [
+  titleRule,
+  textRule,
+  tagsRule,
+  imageUrlRule,
+  ratingRule,
+  handleValidationErrors,
+]
+
+export const getAllPostsValidation = [
+    query('sort').optional().custom(value => {
+      const allowedSortOrders = ['createdAt', 'updatedAt', 'rating', 'title']
+      // remove 'minus' sign
+      const fieldToSort = value.startsWith('-') ? value.substring(1) : value
+      if (!allowedSortOrders.includes(fieldToSort)) {
+        throw new Error('Unknown sort. Allowed fields are: ' + allowedSortOrders.join(', '))
+      }
+      return true
+    }),
+    query('tag').optional().notEmpty(),
+    query('topic_id').optional().notEmpty(),
+    query('user_id').optional().notEmpty(),
+    handleValidationErrors
+]
\ No newline at end of file
Index: validations/UserValidations.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/validations/UserValidations.js b/validations/userValidations.js
rename from validations/UserValidations.js
rename to validations/userValidations.js
--- a/validations/UserValidations.js	(revision 41a4e6a0199a8a98e55a9c083a125bdabb964e0d)
+++ b/validations/userValidations.js	(date 1671486851237)
@@ -1,18 +1,21 @@
 import { body } from 'express-validator'
+import {handleValidationErrors} from "../middleware/index.js";
+
+const emailRule = body('email', 'Invalid e-mail format').isEmail()
+const passwordRule = body('password', 'The password must contain at least 5 characters')
+    .isLength({ min: 5 })
 
 export const loginValidation = [
-  body('email', 'Invalid e-mail format').isEmail(),
-  body('password', 'The password must contain at least 5 characters').isLength({
-    min: 5,
-  }),
+  emailRule,
+  passwordRule,
+  handleValidationErrors
 ]
 
 export const registerValidation = [
-  body('email', 'Invalid e-mail format').isEmail(),
-  body('password', 'The password must contain at least 5 characters').isLength({
-    min: 5,
-  }),
+  emailRule,
+  passwordRule,
   body('first_name', 'Enter the correct first name').isLength({ min: 1 }),
   body('last_name', 'Enter the correct last name').isLength({ min: 1 }),
   body('avatar_url', 'Incorrect link to the avatar').optional(),
+  handleValidationErrors
 ]
Index: routes/index.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/routes/index.js b/routes/index.js
new file mode 100644
--- /dev/null	(date 1671471324160)
+++ b/routes/index.js	(date 1671471324160)
@@ -0,0 +1,16 @@
+import express from "express";
+import userRoutes from "./user.routes.js";
+import postRoutes from "./post.routes.js";
+import tagRoutes from "./tag.routes.js";
+import topicRoutes from "./topic.routes.js";
+import topicGroups from "./topicGroup.routes.js";
+
+const router = express.Router()
+
+router.use('/auth', userRoutes)
+router.use('/posts', postRoutes)
+router.use('/tags', tagRoutes)
+router.use('/topics', topicRoutes)
+router.use('/topicGroups', topicGroups)
+
+export default router
\ No newline at end of file
Index: controllers/UserController.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/controllers/UserController.js b/controllers/UserController.js
--- a/controllers/UserController.js	(revision 41a4e6a0199a8a98e55a9c083a125bdabb964e0d)
+++ b/controllers/UserController.js	(date 1671471822353)
@@ -1,223 +1,177 @@
 import UserModel from '../models/User.js'
 import jwt from 'jsonwebtoken'
 import bcrypt from 'bcrypt'
+import {HttpError} from "./errors/HttpError.js";
 
-const userValidation = (paramId, reqId, role) => {
+const checkUserAccess = (paramId, reqId, role) => {
   if (paramId !== reqId && role !== 'admin') {
-    res.status(403).json({
-      message: 'Failed to update a user',
-    })
+    throw new HttpError(403, 'You are not permitted to update the user')
   }
 }
 
 const createToken = (id, role) => {
-  const token = jwt.sign(
-    {
-      _id: id,
-      role: role,
-    },
-    'secret123',
-    {
-      expiresIn: '30d',
-    }
+  return jwt.sign(
+      {
+        _id: id,
+        role: role,
+      },
+      'secret123',
+      {
+        expiresIn: '30d',
+      }
   )
-  return token
 }
 
 export const register = async (req, res) => {
-  try {
-    const password = req.body.password
-    const salt = await bcrypt.genSalt(10)
-    const hash = await bcrypt.hash(password, salt)
+  const password = req.body.password
+  const salt = await bcrypt.genSalt(10)
+  const hash = await bcrypt.hash(password, salt)
 
-    const doc = new UserModel({
-      email: req.body.email,
-      password_hash: hash,
-      first_name: req.body.first_name,
-      last_name: req.body.last_name,
-      avatar_url: req.body.avatar_url,
-    })
+  const doc = new UserModel({
+    email: req.body.email,
+    password_hash: hash,
+    first_name: req.body.first_name,
+    last_name: req.body.last_name,
+    avatar_url: req.body.avatar_url,
+  })
 
-    const user = await doc.save()
+  const user = await doc.save()
 
-    const token = createToken(user._id, user.role)
+  const token = createToken(user._id, user.role)
 
-    const { password_hash, ...user_data } = user._doc
+  const { password_hash, ...user_data } = user._doc
 
-    res.json({
-      ...user_data,
-      token,
-    })
-  } catch (err) {
-    console.log(err)
-    res.status(500).json({
-      message: 'Failed to register!',
-    })
-  }
+  res.json({
+    ...user_data,
+    token,
+  })
 }
 
 export const login = async (req, res) => {
-  try {
-    const user = await UserModel.findOne({
-      email: req.body.email,
-    })
-    if (!user) {
-      return res.status(404).json({
-        message: 'User not found!',
-      })
-    }
+  const user = await UserModel.findOne({
+    email: req.body.email,
+  })
+  if (!user) {
+    return res.status(404).json({
+      message: 'User not found!',
+    })
+  }
 
-    const is_valid_pass = await bcrypt.compare(
-      req.body.password,
-      user._doc.password_hash
-    )
-    if (!is_valid_pass) {
-      return res.status(400).json({
-        message: 'Invalid login or password!',
-      })
-    }
+  const is_valid_pass = await bcrypt.compare(
+    req.body.password,
+    user._doc.password_hash
+  )
+  if (!is_valid_pass) {
+    return res.status(400).json({
+      message: 'Invalid login or password!',
+    })
+  }
 
-    const token = createToken(user._id, user.role)
+  const token = createToken(user._id, user.role)
 
-    delete user._doc.password_hash
+  delete user._doc.password_hash
 
-    res.json({
-      ...user._doc,
-      token,
-    })
-  } catch (err) {
-    console.log(err)
-    res.status(500).json({
-      message: 'Failed to log in!',
-    })
-  }
+  res.json({
+    ...user._doc,
+    token,
+  })
 }
 
 export const get_me = async (req, res) => {
-  try {
-    const user = await UserModel.findById(req.userId)
+  const user = await UserModel.findById(req.userId)
 
-    if (!user) {
-      return res.status(404).json({
-        message: 'User not found!',
-      })
-    }
+  if (!user) {
+    return res.status(404).json({
+      message: 'User not found!',
+    })
+  }
 
-    const { password_hash, ...user_data } = user._doc
+  const { password_hash, ...user_data } = user._doc
 
-    res.json(user_data)
-  } catch (err) {
-    console.log(err)
-    res.status(500).json({
-      message: 'No access!',
-    })
-  }
+  res.json(user_data)
 }
 
 export const get_all = async (req, res) => {
-  try {
-    if (req.userRole !== 'admin') {
-      return res.status(403).json({
-        message: 'Failed to get a users list',
-      })
-    }
+  if (req.userRole !== 'admin') {
+    return res.status(403).json({
+      message: 'Failed to get a users list',
+    })
+  }
 
-    const users = (await UserModel.find().exec()).map((item) => {
-      const { password_hash, ...user_data } = item._doc
-      return user_data
-    })
+  const users = (await UserModel.find().exec()).map((item) => {
+    const { password_hash, ...user_data } = item._doc
+    return user_data
+  })
 
-    if (!users) {
-      return res.status(404).json({
-        message: 'Users not found!',
-      })
-    }
+  if (!users) {
+    return res.status(404).json({
+      message: 'Users not found!',
+    })
+  }
 
-    res.json(users)
-  } catch (err) {
-    console.log(err)
-    res.status(500).json({
-      message: 'No access!',
-    })
-  }
+  res.json(users)
 }
 
 export const remove = async (req, res) => {
-  try {
-    const userId = req.params.id
+  const userId = req.params.id
 
-    userValidation(userId, req.userId, req.userRole)
+  checkUserAccess(userId, req.userId, req.userRole)
 
-    UserModel.findOneAndDelete(
-      {
-        _id: userId,
-      },
-      (err, doc) => {
-        if (err) {
-          console.log(err)
-          return res.status(500).json({
-            message: "Couldn't delete the user!",
-          })
-        }
+  UserModel.findOneAndDelete(
+    {
+      _id: userId,
+    },
+    (err, doc) => {
+      if (err) {
+        console.log(err)
+        return res.status(500).json({
+          message: "Couldn't delete the user!",
+        })
+      }
 
-        if (!doc) {
-          return res.status(404).json({
-            message: 'User not found!',
-          })
-        }
+      if (!doc) {
+        return res.status(404).json({
+          message: 'User not found!',
+        })
+      }
 
-        res.json({
-          success: true,
-        })
-      }
-    )
-  } catch (err) {
-    console.log(err)
-    res.status(500).json({
-      message: 'No access!',
-    })
-  }
+      res.json({ success: true })
+    }
+  )
 }
 
 export const update = async (req, res) => {
-  try {
-    const userId = req.params.id
+  const userId = req.params.id
 
-    userValidation(userId, req.userId, req.userRole)
+  checkUserAccess(userId, req.userId, req.userRole)
 
-    if (req.userRole !== 'admin') {
-      await UserModel.updateOne(
-        {
-          _id: userId,
-        },
-        {
-          first_name: req.body.first_name,
-          last_name: req.body.last_name,
-          properties: req.body.properties,
-          avatar_url: req.body.avatar_url,
-        }
-      )
-      return res.json({
-        message: 'Update me success',
-      })
-    }
+  if (req.userRole !== 'admin') {
+    await UserModel.updateOne(
+      {
+        _id: userId,
+      },
+      {
+        first_name: req.body.first_name,
+        last_name: req.body.last_name,
+        properties: req.body.properties,
+        avatar_url: req.body.avatar_url,
+      }
+    )
+    return res.json({
+      message: 'Update me success',
+    })
+  }
 
-    await UserModel.updateOne(
-      {
-        _id: userId,
-      },
-      {
-        role: req.body.role,
-        is_blocked: req.body.is_blocked,
-      }
-    )
-    res.json({
-      message: 'Update by admin success',
-    })
-  } catch (err) {
-    console.log(err)
-    res.status(500).json({
-      message: 'No access.',
-    })
-  }
+  await UserModel.updateOne(
+    {
+      _id: userId,
+    },
+    {
+      role: req.body.role,
+      is_blocked: req.body.is_blocked,
+    }
+  )
+  res.json({
+    message: 'Update by admin success',
+  })
 }
Index: controllers/TopicController.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/controllers/TopicController.js b/controllers/TopicController.js
--- a/controllers/TopicController.js	(revision 41a4e6a0199a8a98e55a9c083a125bdabb964e0d)
+++ b/controllers/TopicController.js	(date 1671471700253)
@@ -1,20 +1,7 @@
 import TopicModel from '../models/Topic.js'
 
 export const get_all = async (req, res) => {
-  try {
-    const topics = await TopicModel.find().exec()
+  const topics = await TopicModel.find().exec()
 
-    if (!topics) {
-      return res.status(404).json({
-        message: 'Topics not found!',
-      })
-    }
-
-    res.json(topics)
-  } catch (err) {
-    console.log(err)
-    res.status(500).json({
-      message: 'No access!',
-    })
-  }
+  res.json(topics)
 }
\ No newline at end of file
Index: models/Post.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/models/Post.js b/models/Post.js
--- a/models/Post.js	(revision 41a4e6a0199a8a98e55a9c083a125bdabb964e0d)
+++ b/models/Post.js	(date 1671483018459)
@@ -15,18 +15,11 @@
       type: String,
       required: true,
     },
-    // TODO
     topic_id: {
       type: mongoose.Schema.Types.ObjectId,
       ref: 'Topic',
     },
-    // TODO: tag_names (only names wihtout IDs)
-    tag_ids: [
-      {
-        type: mongoose.Schema.Types.ObjectId,
-        ref: 'Tag',
-      },
-    ],
+    tags: [String],
     text: {
       type: String,
       required: true,
Index: routes/post.routes.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/routes/post.routes.js b/routes/post.routes.js
--- a/routes/post.routes.js	(revision 41a4e6a0199a8a98e55a9c083a125bdabb964e0d)
+++ b/routes/post.routes.js	(date 1671488648190)
@@ -1,19 +1,20 @@
 import express from 'express'
 import { PostController } from '../controllers/index.js'
 import { checkAuth } from '../middleware/index.js'
+import {getAllPostsValidation, postCreateValidation, postUpdateValidation} from "../validations/postValidations.js";
 
 const router = express.Router()
 
 // Get one post
 router.get('/:id', PostController.get_one)
 // Get all posts (query - sort, user_id)
-router.get('/', PostController.get_all)
+router.get('/', getAllPostsValidation, PostController.get_all)
 
 // Create post (optional user_id field for admins)
-router.post('/', checkAuth, PostController.create)
+router.post('/', checkAuth, ...postCreateValidation, PostController.create)
 
 // Update post
-router.patch('/:id', checkAuth, PostController.update)
+router.patch('/:id', checkAuth, ...postUpdateValidation, PostController.update)
 
 // Delete post
 router.delete('/:id', checkAuth, PostController.remove)
Index: index.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/index.js b/index.js
--- a/index.js	(revision 41a4e6a0199a8a98e55a9c083a125bdabb964e0d)
+++ b/index.js	(date 1671471359368)
@@ -1,28 +1,17 @@
 import express from 'express'
 import cors from 'cors'
-import userRoutes from './routes/user.routes.js'
-import postRoutes from './routes/post.routes.js'
-import tagRoutes from './routes/tag.routes.js'
-import topicRoutes from './routes/topic.routes.js'
-import topicGroups from './routes/topicGroup.routes.js'
 // noinspection ES6UnusedImports
 import { db, session } from './mongoose.js'
 import handleErrors from './middleware/handleErrors.js'
 import async from 'express-async-errors'
 import parseToken from './middleware/parseToken.js'
+import routes from "./routes/index.js";
 
 const app = express()
 app.use(express.json())
 app.use(cors())
-
 app.use(parseToken)
-
-app.use('/auth', userRoutes)
-app.use('/posts', postRoutes)
-app.use('/tags', tagRoutes)
-app.use('/topics', topicRoutes)
-app.use('/topicGroups', topicGroups)
-
+app.use('/', routes)
 app.use(handleErrors)
 
 app.listen(process.env.PORT || 4444, (err) => {
Index: controllers/PostController.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/controllers/PostController.js b/controllers/PostController.js
--- a/controllers/PostController.js	(revision 41a4e6a0199a8a98e55a9c083a125bdabb964e0d)
+++ b/controllers/PostController.js	(date 1671489341486)
@@ -5,17 +5,61 @@
 import { session } from './../mongoose.js'
 import { HttpError } from './errors/HttpError.js'
 import TopicModel from '../models/Topic.js'
+import TagModel from '../models/Tag.js'
 import mongoose from 'mongoose'
+import {knownTopicGroups} from "./TopicGroupController.js";
+
+// getOrCreateTopic("id", undefined)
+// getOrCreateTopic(undefined, {title: "t", group: "Films"})
+// returns ObjectId("topic id")
+const getOrCreateTopic = async (existingTopicId, newTopic) => {
+  if (existingTopicId && newTopic) {
+    throw new HttpError(400, 'Pass either topic_id or topic fields but not both')
+  }
+  if (existingTopicId) {
+    if (!(await TopicModel.findOne({_id: existingTopicId}))) {
+      throw new HttpError(400, `Topic ${existingTopicId} not found`)
+    }
+    return new mongoose.Types.ObjectId(existingTopicId)
+  }
 
-// TODO
-const getOrCreateTopic = (req) => {}
+  if (!knownTopicGroups.includes(newTopic.group)) {
+    throw new HttpError(
+        400,
+        `Unknown topic group: ${newTopic.group}. ` +
+        `Should be one of: ${knownTopicGroups.join(', ')}`
+    )
+  }
+  const topicDoc = new TopicModel({
+    title: newTopic.title,
+    group: newTopic.group,
+  })
+  await topicDoc.save()
+  return topicDoc._id
+}
 
-// TODO: create and delete tags (if not connections with another posts)
-const proccesTags = (oldTags, newTags) => {}
+// oldTags and newTags are arrays of tag names
+const handleTagsChange = async (oldTags, newTags) => {
+  const tagsDeleted = oldTags.filter(oldTag => !newTags.includes(oldTag))
+  const tagsAdded = newTags.filter(newTag => !oldTags.includes(newTag))
 
-const agregation = (match, userId) => {
+  await Promise.all(tagsAdded.map(tagAdded => TagModel.findOneAndUpdate(
+      {text: tagAdded},
+      {text: tagAdded},
+      {upsert: true, new: true, setDefaultsOnInsert: true}
+  ).exec()))
+
+  await Promise.all(tagsDeleted.map(async tagDeleted => {
+    const postsWithTheTag = await PostModel.find({tags: {$elemMatch: {$eq: tagDeleted}}}).exec()
+    if (postsWithTheTag.length === 0) {
+      await TagModel.deleteOne({text: tagDeleted}).exec()
+    }
+  }))
+}
+
+const preparePostAggregation = (matchCondition, viewingUserId) => {
   return [
-    match,
+    matchCondition,
     {
       $project: {
         title: 1,
@@ -25,7 +69,7 @@
         createdAt: 1,
         updatedAt: 1,
         user_id: 1,
-        tag_ids: 1,
+        tags: 1,
         topic_id: 1,
       },
     },
@@ -38,14 +82,6 @@
       },
     },
     {
-      $lookup: {
-        from: 'tags',
-        localField: 'tag_ids',
-        foreignField: '_id',
-        as: 'tags',
-      },
-    },
-    {
       $lookup: {
         from: 'topics',
         localField: 'topic_id',
@@ -63,7 +99,7 @@
           {
             $match: {
               $expr: {
-                $eq: ['$user_id', new mongoose.Types.ObjectId(userId)],
+                $eq: ['$user_id', new mongoose.Types.ObjectId(viewingUserId)],
               },
             },
           },
@@ -109,39 +145,36 @@
     },
   ]
 }
-// TODO: write the check in a separate file (for users and posts)
-const userValidation = (userId, reqId, role, message) => {
-  if (userId !== reqId && role !== 'admin') {
-    res.status(403).json({
-      message: `Failed to ${message} an post`,
-    })
+
+const checkUserPostAccess = (postUserId, loggedInUserId, loggedInUserRole, action) => {
+  if (postUserId !== loggedInUserId && loggedInUserRole !== 'admin') {
+    throw new HttpError(403, `You are not allowed to ${action} this post`)
   }
 }
 
 export const updatePostLike = async (req, res, addLike) => {
-  const post = await PostSchema.findById(req.params.id)
+  await session.withTransaction(async () => {
+    const post = await PostSchema.findById(req.params.id)
 
-  if (post === undefined) {
-    throw new HttpError(400, 'Post not found')
-  }
+    if (post === undefined) {
+      throw new HttpError(400, 'Post not found')
+    }
 
-  const postLikeData = {
-    user_id: req.userId,
-    post_id: req.params.id,
-  }
+    const postLikeData = {
+      user_id: req.userId,
+      post_id: req.params.id,
+    }
 
-  const postLike = await PostLike.findOne(postLikeData)
+    const postLike = await PostLike.findOne(postLikeData)
 
-  if (addLike && postLike !== null) {
-    throw new HttpError(409, 'Like is already added')
-  }
+    if (addLike && postLike !== null) {
+      throw new HttpError(409, 'Like is already added')
+    }
 
-  if (!addLike && postLike === null) {
-    throw new HttpError(409, 'Like does not exist')
-  }
+    if (!addLike && postLike === null) {
+      throw new HttpError(409, 'Like does not exist')
+    }
 
-  session.startTransaction()
-  try {
     if (addLike) {
       await new PostLike(postLikeData).save()
     } else {
@@ -155,57 +188,35 @@
         $inc: { likes_number: addLike ? 1 : -1 },
       }
     )
-    session.commitTransaction()
-  } catch (e) {
-    session.abortTransaction()
-    throw e
-  }
+    res.json({ success: true })
+  })
+}
 
-  res.json({
-    success: true,
-  })
-}
-// TODO: (create and update (only for tags without topic))
-// req.body.tags
+// req.body.tags - tag names array
 // req.body.topic_id || req.body.topic === {title, group}
 export const create = async (req, res) => {
-  try {
-    const userId = req.body.user_id || req.userId
-
-    userValidation(userId, req.userId, req.userRole, 'create')
-
-    const topicId = getOrCreateTopic(req)
-
-    // TODO: session.startTransaction
-    proccesTags([], req.body.tags)
+  const userId = req.body.user_id || req.userId
+  checkUserPostAccess(userId, req.userId, req.userRole, 'create')
 
-    // TODO:
-    // const topic = new TopicModel({
-    //   title: req.body.title,
-    //   group: req.body.group,
-    // })
-    //
-    // const topic = await doc.save()
-
+  await session.withTransaction(async () => {
+    // todo: check user exists
+    const topicId = await getOrCreateTopic(req.body.topic_id, req.body.topic)
     const doc = new PostModel({
       title: req.body.title,
       topic_id: topicId,
-      tag_ids: req.body.tags,
+      tags: req.body.tags,
       text: req.body.text,
       image_url: req.body.image_url,
       rating: req.body.rating,
-      user_id: userId,
+      user_id: new mongoose.Types.ObjectId(userId),
     })
-
     const post = await doc.save()
-
-    res.json(post)
-  } catch (err) {
-    console.log(err)
-    res.status(500).json({
-      message: 'Failed to create an article',
+    await handleTagsChange([], req.body.tags)
+    res.json({
+      success: true,
+      post_id: post._id.toString()
     })
-  }
+  })
 }
 
 export const get_one = async (req, res) => {
@@ -215,113 +226,74 @@
     },
   }
 
-  const posts = await PostModel.aggregate(agregation(match, req.userId)).exec()
-
+  const posts = await PostModel.aggregate(preparePostAggregation(match, req.userId)).exec()
   if (posts.length === 0) {
-    res.status(404).json({
-      message: 'Post not found',
-    })
-    return
+    throw new HttpError(404, 'Post not found')
   }
 
   res.json(posts[0])
 }
 
+// Possible query params:
+//    sort=field or sort=-field    (to set sort order)
+//    tag=tag_name                 (to show posts for tag)
+//    user_id=
+//    topic_id=
 export const get_all = async (req, res) => {
-  try {
-    const sortOrder = req.query.sort || '-createdAt'
-    const userId = req.query.user_id
-
-    const filterCondition = userId ? { user_id: userId } : {}
+  const sortOrder = req.query.sort || '-createdAt'
+  const filter = {}
+  req.query.user_id && (filter.user_id = req.query.user_id)
+  req.query.topic_id && (filter.topic_id = req.query.topic_id)
+  req.query.tag && (filter.tags = {$elemMatch: {$eq: req.query.tag}})
 
-    const match = {
-      $match: filterCondition,
-    }
+  const match = {
+    $match: filter,
+  }
 
-    const posts = await PostModel.aggregate(agregation(match, req.userId))
-      .sort(sortOrder)
-      .exec()
+  const posts = await PostModel.aggregate(preparePostAggregation(match, req.userId))
+    .sort(sortOrder)
+    .exec()
 
-    res.json(posts)
-  } catch (err) {
-    console.log(err)
-    res.status(500).json({
-      message: 'Failed to get posts',
-    })
-  }
+  res.json(posts)
 }
 
 export const remove = async (req, res) => {
-  try {
-    const postId = req.params.id
-
-    const post = await PostModel.findOne(postId)
-
-    userValidation(post.user_id, req.userId, req.userRole, 'delete')
-
-    proccesTags(post.tags, [])
-
-    PostModel.findOneAndDelete(
-      {
-        _id: postId,
-      },
-      (err, doc) => {
-        if (err) {
-          console.log(err)
-          return res.status(500).json({
-            message: 'Couldn not delete the article',
-          })
-        }
+  const postFilter = { _id: new mongoose.Types.ObjectId(req.params.id) }
+  const post = await PostModel.findOne(postFilter)
+  if (!post) {
+    throw new HttpError(404, 'Post not found')
+  }
 
-        if (!doc) {
-          return res.status(404).json({
-            message: 'Article not found',
-          })
-        }
+  checkUserPostAccess(post.user_id.toString(), req.userId, req.userRole, 'delete')
 
-        res.json({
-          succes: true,
-        })
-      }
-    )
-  } catch (err) {
-    console.log(err)
-    res.status(500).json({
-      message: 'Failed to get articles',
-    })
-  }
+  await session.withTransaction(async () => {
+    await PostModel.findOneAndDelete(postFilter).exec()
+    await handleTagsChange(post.tags, [])
+    res.json({ success: true })
+  })
 }
 
 export const update = async (req, res) => {
-  try {
-    const postId = req.params.id
-
-    const post = await PostModel.findOne(postId)
+  const postId = req.params.id
+  const post = await PostModel.findOne({_id: postId})
+  checkUserPostAccess(post.user_id.toString(), req.userId, req.userRole, 'update')
 
-    proccesTags(post.tags, req.body.tags)
-
+  await session.withTransaction(async () => {
     await PostModel.updateOne(
-      {
-        _id: postId,
-      },
-      {
-        title: req.body.title,
-        topic_id: req.body.topic_id,
-        tag_ids: req.body.tags,
-        text: req.body.text,
-        image_url: req.body.image_url,
-        rating: req.body.rating,
-      }
+        {
+          _id: postId,
+        },
+        {
+          title: req.body.title,
+          tags: req.body.tags,
+          text: req.body.text,
+          image_url: req.body.image_url,
+          rating: req.body.rating,
+        }
     )
-    res.json({
-      success: true,
-    })
-  } catch (err) {
-    console.log(err)
-    res.status(500).json({
-      message: 'Failed to update an article',
-    })
-  }
+    await handleTagsChange(post.tags, req.body.tags)
+    res.json({ success: true })
+  })
 }
 
 export const addLike = async (req, res) => {
Index: middleware/handleErrors.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/middleware/handleErrors.js b/middleware/handleErrors.js
--- a/middleware/handleErrors.js	(revision 41a4e6a0199a8a98e55a9c083a125bdabb964e0d)
+++ b/middleware/handleErrors.js	(date 1671487495341)
@@ -1,5 +1,4 @@
 export default (err, req, res, next) => {
-  console.log(err)
   const status = Number.isInteger(err.status) ? err.status : 500
   res.status(status).json({
     message: err.message || 'Failed to complete operation: ' + err,
Index: controllers/TopicGroupController.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/controllers/TopicGroupController.js b/controllers/TopicGroupController.js
--- a/controllers/TopicGroupController.js	(revision 41a4e6a0199a8a98e55a9c083a125bdabb964e0d)
+++ b/controllers/TopicGroupController.js	(date 1671467998666)
@@ -1,5 +1,5 @@
+export const knownTopicGroups = ['Films', 'Books', 'Games']
+
 export const get_all = async (req, res) => {
-    res.json([
-        'Films', 'Books', 'Games'
-    ])
+    res.json([knownTopicGroups])
 }
\ No newline at end of file
